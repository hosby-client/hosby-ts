name: Security Checks

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly for ongoing monitoring

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true  # Prevents build failure for low-severity issues

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run SAST scan with ESLint security plugins
        run: |
          # Install eslint and security plugins (using v8 for .eslintrc.js compatibility)
          npm install -D eslint@8 eslint-plugin-security @typescript-eslint/eslint-plugin @typescript-eslint/parser
          
          # Create a temporary .eslintrc.js file (CommonJS format)
          cat > .eslintrc.js << 'EOF'
          module.exports = {
            root: true,
            extends: [
              'eslint:recommended',
              'plugin:@typescript-eslint/recommended',
              'plugin:security/recommended'
            ],
            parser: '@typescript-eslint/parser',
            parserOptions: {
              project: './tsconfig.json',
              ecmaVersion: 2020,
              sourceType: 'module',
            },
            plugins: [
              '@typescript-eslint',
              'security'
            ],
            rules: {
              'security/detect-object-injection': 'warn',
              'security/detect-non-literal-regexp': 'warn',
              'security/detect-non-literal-require': 'warn',
              'security/detect-eval-with-expression': 'error',
              'security/detect-buffer-noassert': 'error', 
              'security/detect-child-process': 'warn',
              'security/detect-disable-mustache-escape': 'error',
              'security/detect-no-csrf-before-method-override': 'error',
              'security/detect-unsafe-regex': 'warn',
              '@typescript-eslint/explicit-function-return-type': 'warn',
              '@typescript-eslint/no-explicit-any': 'warn',
              '@typescript-eslint/no-unused-vars': 'error',
              'no-console': 'warn',
            },
            ignorePatterns: ['node_modules', 'dist', '__tests__']
          };
          EOF
          
          # Run ESLint with security plugin
          npx eslint . --ext .ts,.tsx --max-warnings=0
  
  secret-scanning:
    name: Secret and Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Note: Gitleaks now requires a license for organizations
      # Alternative free secret scanner using trufflehog
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.59.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'hosby-ts'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired
      
      # Generate a text report that can be seen directly in the GitHub UI
      - name: Create summary report
        if: always()
        run: |
          if [ -d "reports" ]; then
            echo "## Security Scan Results" > $GITHUB_STEP_SUMMARY
            echo "OWASP Dependency check completed. See artifacts for details." >> $GITHUB_STEP_SUMMARY
          fi
